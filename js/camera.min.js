/*!
 * Start Bootstrap - SB Admin 2 v4.1.4 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */

import*as params from"./params.js";import{isMobile}from"./util.js";class Camera{constructor(){this.webcam=document.getElementById("webcam"),this.canvasWebcam=document.getElementById("output"),this.ctx=this.canvasWebcam.getContext("2d")}static async setupCamera(e){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new Error("Browser API navigator.mediaDevices.getUserMedia not available");var{targetFPS:t,sizeOption:e}=e,e=params.VIDEO_SIZE[e],e={audio:!1,video:{facingMode:"user",width:(isMobile()?params.VIDEO_SIZE["360 X 270"]:e).width,height:(isMobile()?params.VIDEO_SIZE["360 X 270"]:e).height,frameRate:{ideal:t}}},t=await navigator.mediaDevices.getUserMedia(e);const a=new Camera;a.webcam.srcObject=t,await new Promise(e=>{a.webcam.onloadedmetadata=()=>{e(webcam)}}),a.webcam.play();e=a.webcam.videoWidth,t=a.webcam.videoHeight;a.webcam.width=e,a.webcam.height=t,a.canvasWebcam.width=e,a.canvasWebcam.height=t;const i=document.querySelector(".canvas-wrapper");return i.style=`width: ${e}px; height: ${t}px`,a.ctx.translate(a.webcam.videoWidth,0),a.ctx.scale(-1,1),a}drawCtx(){this.ctx.drawImage(this.webcam,0,0,this.webcam.videoWidth,this.webcam.videoHeight)}clearCtx(){this.ctx.clearRect(0,0,this.webcam.videoWidth,this.webcam.videoHeight)}drawResults(e){for(const t of e)this.drawResult(t)}drawResult(e){null!=e.keypoints&&(this.drawKeypoints(e.keypoints),this.drawSkeleton(e.keypoints))}drawKeypoints(e){var t=poseDetection.util.getKeypointIndexBySide(params.STATE.MoveNet);this.ctx.fillStyle="White",this.ctx.strokeStyle="White",this.ctx.lineWidth=params.DEFAULT_LINE_WIDTH;for(const a of t.middle)this.drawKeypoint(e[a]);this.ctx.fillStyle="Green";for(const i of t.left)this.drawKeypoint(e[i]);this.ctx.fillStyle="Orange";for(const s of t.right)this.drawKeypoint(e[s])}drawKeypoint(e){var t=null!=e.score?e.score:1;if((params.MOVENET_CONFIG.scoreThreshold||0)<=t){const a=new Path2D;a.arc(e.x,e.y,params.DEFAULT_RADIUS,0,2*Math.PI),this.ctx.fill(a),this.ctx.stroke(a)}}drawSkeleton(r){this.ctx.fillStyle="White",this.ctx.strokeStyle="White",this.ctx.lineWidth=params.DEFAULT_LINE_WIDTH,poseDetection.util.getAdjacentPairs(params.STATE.MoveNet).forEach(([e,t])=>{var a=r[e],i=r[t],s=null!=a.score?a.score:1,e=null!=i.score?i.score:1,t=params.MOVENET_CONFIG.scoreThreshold||0;t<=s&&t<=e&&(this.ctx.beginPath(),this.ctx.moveTo(a.x,a.y),this.ctx.lineTo(i.x,i.y),this.ctx.stroke())})}}export{Camera};